Здесь находятся все лабораторные работы по андроид разработке. А также курсовая работа на тему "Разработка приложения для обмена сообщениями между пользователями".

Задания к лабораторным работам

Общие требования

Среда разработки по-умолчанию — Android Studio. Язык программирования — Java.
По своему желанию, можно использовать Kotlin, а также XCode/Swift при наличии
соответствующего оборудования.
Решения должны быть размещены в виде проекта в git репозитории (github/bitbucket).
Ссылку на git репозиторий надо прислать до дедлайна на почту: atorkhov@gmail.com
Минимальная версия API - 19.

Вводное задание №0

Скачать, установить и запустить Android Studio. Создать первое приложение с одной
активити. Добавить кнопку и сделать какое-либо действие по нажатию на кнопку.

Задание №1

Реализовать приложение, состоящее из двух активити:
Первое активити - это splash screen. Полноэкранное без ActionBar, c одной картинкой
(или анимацией по желанию) по центру. Активити показывается 2 секунды, потом
запускает второе и первое «умирает». Ожидание необходимо реализовать через
Thread.sleep.
Второе активити представляет из себя список из 1000000 (один миллион) элементов,
где четные элементы имеют серый фон (#CCCCCC), а нечетные — белый (#FFFFFF).
Каждый элемент содержит картинку и текст. Картинка может быть любая, и она не
меняется для элементов (выбирайте маленькую). Текст каждого элемента — это его
индекс текстом (пример «cто двенадцать»). Отсчет начинается с единицы. Шрифт
большой.
Приложение должно нормально обрабатывать поворот экрана. При нажатии на
клавишу back во втором активити приложение должно закрываться.

Задание №2

Реализовать приложение, состоящее из двух активити:
Первое активити — сплеш скрин из первой лабораторной, только показывается не
больше чем время загрузки.
Второе активити представляет собой список и ViewPager сформированный из
json-файла:
https://raw.githubusercontent.com/wesleywerner/ancient-tech/02decf875616dd9692b31658d
92e64a20d99f816/src/data/techs.ruleset.json
Этот JSON файл — массив «технологий» в игре Цивилизация. В каждой технологии
вас должны интересовать поля:
● graphic - картинка (относительно
https://raw.githubusercontent.com/wesleywerner/ancient-tech/02decf875616dd9692b31658d
92e64a20d99f816/src/images/tech/ )
● name - название
● helptext - дополнительная информация (может не быть)
Второе активити должно начинаться с фрагмента со списком, в элементе списка
маленькая картинка 64dp и название.
Список кликабельный. При клике на технологии открывается ViewPager c фрагментом,
в котором соответствующая картинка большого размера (не больше ширины
экрана-20dp) и описанием технологии. При свайпе вправо описание должно меняться
на описание предмета выше в списке, соответственно влево - на описание ниже в
списке.
Опционально приложение может предоставлять Content Provider с данными
технологий.
Загрузка JSON должна происходить в момент показа сплеш скрина. Загрузка картинок,
в процессе показа списка (естественно не в UI потоке), имена технологий не должны
прыгать в процессе загрузки. Необходимо минимизировать использование трафика.

Задание №3

Создать приложение, взаимодействующее с базой данных. Первое активити должно
содержать три кнопки. При нажатии на первую кнопку должно открываться новое
активити, выводящее информацию из таблицы Студенты в удобном для восприятия
формате.
При запуске приложения необходимо:
1. Создать БД, если ее не существует.
2. Создать таблицу Студенты, содержащую поля:
● ID
● ФИО
● Время добавления записи
3. Удалять все записи из БД, а затем вносить 5 записей об одногруппниках со
случайными данными
При нажатии на вторую кнопку необходимо внести еще одну запись в таблицу.
При нажатии на третью кнопку необходимо заменить ФИО в последней внесенной
записи на Иванов Иван Иванович.
Создать также новое отдельное приложение на основе приложения, созданного в
части 1. Новое приложение должно иметь тот же самый package name, чтобы
обновлять первое при установке. Переопределить функцию onUpgrade. При
изменении изменить таблицу Студенты следующим образом:
● ID
● Фамилия
● Имя
● Отчество
● Время добавления записи
Данные из поля ФИО необходимо по проблема разделить на три поля: Фамилия, Имя,
Отчество. Также, изменить версию базы данных.

Задание №4

Реализовать widget, показывающий количество дней до установленной даты. По
нажатию на сам виджет, отображать диалог для выбора даты. В указанный день, в
9:00, показывать уведомление о том что событие наступило.

Задание №5.

Разработать клиент для сервиса thecatapi.com. Сервис выдает картинки с кошками и
имеет возможность поиска по породе. Приложение должно иметь форму для выбора
породы, кнопку поиска и компоненту для отображения результата.
Требования по функционалу:
1. Сохранять последние параметры формы.
2. Реализовать бесконечный скроллинг.
3. Реализовать возможность голосования за картинку (кнопки лайк/дизлайк).
4. Запоминать последние 10 лайков и сделать отдельный экран для их
отображения.
* Также показывать не только картинки, но и видео

Задание №6

Необходимо создать приложение моделирующее e-commerce решение. Приложение
должно состоять из двух частей располагающихся на разных экранах/активити:
● store-front — клиент, где осуществляются просмотр и покупка товаров
● back-end — административная часть, позволяющая добавлять новые товары
или редактировать существующие
Информация о товаре должна содержать наименование, стоимость и количество
(единиц в наличии).
Store-front предоставляет возможности просмотра полной информации об одной
товарной позиции и перехода к следующей или предыдущей позиции. Товар
отображается только в том случае если его количество больше нуля. Переход от
одного товара к другому происходит с анимированным сдвигом экрана влево/вправо
при горизонтальном «перелистывании».
Back-end предоставляет возможности просмотра, редактирования и добавления
продуктов. В любой момент пользователь может переходить от одного экрана к
другому.

Задание №7.

Модифицировать приложение из задания №6. При покупка и сохранении данных после
редактирования сделать случайную задержку в интервале 3-5 секунд.
И чтобы не блокировать приложение эти операции необходимо выполнять в
отдельных потоках. При этом пользователь может продолжать редактировать или
покупать товары, не дожидаясь завершения предыдущих операций. После завершения
каждой операции, изменения должны отражаться на экране store-front. Операция
покупки завершается уменьшением количества продукта на 1. Товар должен пропасть
с экрана store-front когда его количество достигнет 0. Необходимо гарантировать, что у
пользователя не будет возможности купить продукт с количеством менее 1, а
изменения вносимые на экране back-end не будут потеряны.

Задание №8.

Реализовать приложение для отображения маршрута между двумя точками. Должно
включать два активити:
1. Активити ввода начальной и конечной точки, которая содержит два таба “Откуда” и
“Куда”. Внутри таба: поле ввода для поиска, список найденных вариантов (видимы 3
шт, остальное - скролл), карта. При вводе, при помощи геокодера
(https://developers.google.com/maps/documentation/geocoding/start) надо определить и
отобразить найденные варианты адреса в списке. При клике на элементе списка
показывать выбранный вариант на карте.
Также на данном активити - кнопка поиск, при нажатии переход на следующее
активити с результатом.
2. Активити результата:
Карта, смасштабированная таким образом что включает:
• Местоположение пользователя по геолокации
• Путь от точки Откуда в точку Куда, полученный с помощью прямого запроса к
Google сервису DirectionsAPI ( https://developers.google.com/maps/docu ... irections/ ). Нас
интересуют только координаты, подсказки пути не важны. Отрисовываем в виде
Polyline черного цвета.
В случае, если маршрут не смог построится, пишем “Not found” над картой.